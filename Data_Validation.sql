--Checking Each Table
--1.) User Table

--a.)Duplicate Check
SELECT 
ID
,CREATED_DATE
,BIRTH_DATE
,STATE
,LANGUAGE
,GENDER
FROM `fetch.user`
GROUP BY ID, CREATED_DATE, BIRTH_DATE, STATE, LANGUAGE, GENDER
HAVING COUNT(*)>1
--no duplicates

--b.) checking Null values
SELECT 
COUNTIF(ID IS NULL) AS ID_null_count
,COUNTIF(CREATED_DATE IS NULL) as created_date_null_count
,COUNTIF(BIRTH_DATE IS NULL) as birth_date_null_count
,COUNTIF(STATE IS NULL) as State_null_count
,COUNTIF(LANGUAGE IS NULL) as language_null_count
,COUNTIF(GENDER IS NULL) as gender_null_count
FROM `fetch.user`

--Total Population
SELECT DISTINCT count(ID) from `fetch.user`

--c.) Data Types
SELECT DISTINCT
TYPEOF(ID) as ID_DataType
,TYPEOF(CREATED_DATE) AS CREATE_DATE_DATATYPE
,TYPEOF(BIRTH_DATE) AS BIRTH_DATE_DATATYPE
,TYPEOF(STATE) AS STATE_DATATYPE
,TYPEOF(LANGUAGE) AS LANGUAGE_DATATYPE
,TYPEOF(GENDER) AS GENDER_DATATYPE
FROM `fetch.user`
-- CONSISTENT DATA TYPES

--2.) Products Table

--a.) Checking for duplicates
SELECT 
CATEGORY_1
,CATEGORY_2
,CATEGORY_3
,CATEGORY_4
, MANUFACTURER
, BRAND
, BARCODE
FROM `fetch.products`
GROUP BY 
CATEGORY_1
,CATEGORY_2
,CATEGORY_3
,CATEGORY_4
, MANUFACTURER
, BRAND
, BARCODE
HAVING COUNT(*)>1
-- duplicate as expected

--b.) Null Values
SELECT 
COUNTIF(CATEGORY_1 IS NULL) AS CATEGORY1_null_count
,COUNTIF(CATEGORY_2 IS NULL) as CATEGORY2_null_count
,COUNTIF(CATEGORY_3 IS NULL) as CATEGORY3_null_count
,COUNTIF(CATEGORY_4 IS NULL) as CATEGORY4_null_count
,COUNTIF(MANUFACTURER IS NULL) as MANUFACTER_null_count
,COUNTIF(BRAND IS NULL) as BRAND_null_count
,COUNTIF(BARCODE IS NULL) as BARCODE_null_count
FROM `fetch.products`

--total population
SELECT DISTINCT COUNT(*) FROM `fetch.products`

--c.) Data Types
SELECT DISTINCT
TYPEOF(CATEGORY_1) as CATEGORY1_DataType
,TYPEOF(CATEGORY_2) AS CATEGORY2_DATATYPE
,TYPEOF(CATEGORY_3) AS CATEGORY3_DATATYPE
,TYPEOF(CATEGORY_4) AS CATEGORY4_DATATYPE
,TYPEOF(MANUFACTURER) AS MANUFACTURER_DATATYPE
,TYPEOF(BRAND) AS BRAND_DATATYPE
,TYPEOF(BARCODE) AS BARCODE_DATATYPE
FROM `fetch.products`

--3.) Transactions Table
--a.) Duplicate Check
SELECT 
RECEIPT_ID
,PURCHASE_DATE
,SCAN_DATE
,STORE_NAME
,USER_ID
,BARCODE
,FINAL_QUANTITY
,FINAL_SALE
FROM `fetch.transaction`
GROUP BY 
RECEIPT_ID
,PURCHASE_DATE
,SCAN_DATE
,STORE_NAME
,USER_ID
,BARCODE
,FINAL_QUANTITY
,FINAL_SALE
HAVING COUNT(*)>1
-- Duplicate values as expected 

--b.) Checking for Null Values
SELECT 
COUNTIF(RECEIPT_ID IS NULL) AS RECEIPTID_null_count
,COUNTIF(PURCHASE_DATE IS NULL) as PURCHASEDATE_null_count
,COUNTIF(SCAN_DATE IS NULL) as SCANDATE_null_count
,COUNTIF(STORE_NAME IS NULL) as STORENAME_null_count
,COUNTIF(USER_ID IS NULL) as USERID_null_count
,COUNTIF(BARCODE IS NULL) as BARCODE_null_count
,COUNTIF(FINAL_QUANTITY IS NULL) as FINALQUANTITY_null_count
,COUNTIF(FINAL_SALE  IS NULL) as FINALSALE_null_count
FROM `fetch.transaction`

--total rows
SELECT DISTINCT COUNT(RECEIPT_RECEIPT_ID) FROM `fetch.transaction`

--c.) Data Types
SELECT DISTINCT
TYPEOF(RECEIPT_ID) as RECEIPT_ID_DataType
,TYPEOF(PURCHASE_DATE) AS PURCHASE_DATE_DATATYPE
,TYPEOF(SCAN_DATE) AS SCAN_DATE_DATATYPE
,TYPEOF(STORE_NAME) AS STORE_NAME_DATATYPE
,TYPEOF(USER_ID) AS USER_ID_DATATYPE
,TYPEOF(BARCODE) AS BARCODE_DATATYPE
,TYPEOF(FINAL_QUANTITY) AS FINALQUANTITY_DATATYPE
,TYPEOF(FINAL_SALE) AS FINALSALE_DATATYPE
FROM `fetch.transaction`

